// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: zoodroom.proto

package zoodroom

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TomatoService service

type TomatoService interface {
	AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...client.CallOption) (*AddFeedbackResponse, error)
	GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...client.CallOption) (*GetFeedbackResponse, error)
}

type tomatoService struct {
	c    client.Client
	name string
}

func NewTomatoService(name string, c client.Client) TomatoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "zoodroom"
	}
	return &tomatoService{
		c:    c,
		name: name,
	}
}

func (c *tomatoService) AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...client.CallOption) (*AddFeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "TomatoService.AddFeedback", in)
	out := new(AddFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tomatoService) GetFeedback(ctx context.Context, in *GetFeedbackRequest, opts ...client.CallOption) (*GetFeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "TomatoService.GetFeedback", in)
	out := new(GetFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TomatoService service

type TomatoServiceHandler interface {
	AddFeedback(context.Context, *AddFeedbackRequest, *AddFeedbackResponse) error
	GetFeedback(context.Context, *GetFeedbackRequest, *GetFeedbackResponse) error
}

func RegisterTomatoServiceHandler(s server.Server, hdlr TomatoServiceHandler, opts ...server.HandlerOption) error {
	type tomatoService interface {
		AddFeedback(ctx context.Context, in *AddFeedbackRequest, out *AddFeedbackResponse) error
		GetFeedback(ctx context.Context, in *GetFeedbackRequest, out *GetFeedbackResponse) error
	}
	type TomatoService struct {
		tomatoService
	}
	h := &tomatoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TomatoService{h}, opts...))
}

type tomatoServiceHandler struct {
	TomatoServiceHandler
}

func (h *tomatoServiceHandler) AddFeedback(ctx context.Context, in *AddFeedbackRequest, out *AddFeedbackResponse) error {
	return h.TomatoServiceHandler.AddFeedback(ctx, in, out)
}

func (h *tomatoServiceHandler) GetFeedback(ctx context.Context, in *GetFeedbackRequest, out *GetFeedbackResponse) error {
	return h.TomatoServiceHandler.GetFeedback(ctx, in, out)
}
